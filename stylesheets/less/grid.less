/////////////////
// Semantic.gs // for LESS: http://lesscss.org/
/////////////////

// Defaults which you can freely override
@column-width: 60;
@gutter-width: 20;
@columns: 12;
@gutter-method: margin;

// Utility variable - you should never need to modify this
@gridsystem-width: (@column-width*@columns) + (@gutter-width*@columns) * 1px;

// Set @total-width to 100% for a fluid layout
@total-width: @gridsystem-width;

// Uncomment these two lines and the star-hack width/margin lines below to enable sub-pixel fix for IE6 & 7. See http://tylertate.com/blog/2012/01/05/subpixel-rounding.html
// @min-width: 960;
// @correction: 0.5 / @min-width * 100 * 1%;

// The micro clearfix http://nicolasgallagher.com/micro-clearfix-hack/
.clearfix() {
	*zoom:1;
	
	&:before,
	&:after {
	    content:"";
	    display:table;
	}
	&:after {
	    clear:both;
	}
}


//////////
// BODY //
//////////

body {
	width: 100%;
	.clearfix;
}


//////////
// ROWS //
//////////

// Margin-based rows
.row(@columns:@columns) when (@gutter-method = margin) {
	@calculated-row-width: @total-width*((@gutter-width + @gridsystem-width)/@gridsystem-width);
	@calculated-gutter-width: @total-width*(((@gutter-width*.5)/@gridsystem-width)*-1);
	display: block;
	width: @calculated-row-width;
	margin-left: @calculated-gutter-width;
	margin-right: @calculated-gutter-width;
	// *width: @calculated-row-width-@correction;
	// *margin-left: @calculated-gutter-width-@correction;
	// *margin-right: @calculated-gutter-width-@correction;
	.clearfix;
}

// Padding-based rows
.row(@columns:@columns) when (@gutter-method = padding) {
	@calculated-row-width: @total-width*((@gutter-width + @gridsystem-width)/@gridsystem-width);
	@calculated-gutter-width: @total-width*(((@gutter-width*.5)/@gridsystem-width)*-1);
	display: block;
	width: @calculated-row-width;
	padding-left: @calculated-gutter-width;
	padding-right: @calculated-gutter-width;
	// *width: @calculated-row-width-@correction;
	// *padding-left: @calculated-gutter-width-@correction;
	// *padding-right: @calculated-gutter-width-@correction;
	.clearfix;
}


/////////////
// COLUMNS //
/////////////

// Margin-based column
.column(@x,@columns:@columns) when (@gutter-method = margin) {
	@calculated-column-width: @total-width*((((@gutter-width+@column-width)*@x)-@gutter-width) / @gridsystem-width);
	@calculated-gutter-width: @total-width*((@gutter-width*.5)/@gridsystem-width);
	display: inline;
	float: left;
	width: @calculated-column-width;
	margin-left: @calculated-gutter-width;
	margin-right: @calculated-gutter-width;
	// *width: @calculated-column-width-@correction;
	// *margin-left: @calculated-gutter-width-@correction;
	// *margin-right: @calculated-gutter-width-@correction;
}

// Padding-based column
.column(@x,@columns:@columns) when (@gutter-method = padding) {
	@calculated-column-width: @total-width*((((@gutter-width+@column-width)*@x)-@gutter-width) / @gridsystem-width);
	@calculated-gutter-width: @total-width*((@gutter-width*.5)/@gridsystem-width);
	display: inline;
	float: left;
	width: @calculated-column-width;
	padding-left: @calculated-gutter-width;
	padding-right: @calculated-gutter-width;
	// *width: @calculated-column-width-@correction;
	// *padding-left: @calculated-gutter-width-@correction;
	// *padding-right: @calculated-gutter-width-@correction;
}


/////////////////
// PUSH / PULL //
/////////////////

.push(@offset:1) {
	margin-left: @total-width*(((@gutter-width+@column-width)*@offset) / @gridsystem-width) + @total-width*((@gutter-width*.5)/@gridsystem-width);
}
.pull(@offset:1) {
	margin-right: @total-width*(((@gutter-width+@column-width)*@offset) / @gridsystem-width) + @total-width*((@gutter-width*.5)/@gridsystem-width);
}